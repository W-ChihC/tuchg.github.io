<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tuchg 的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tuchg.github.io/"/>
  <updated>2020-07-05T03:34:42.975Z</updated>
  <id>https://tuchg.github.io/</id>
  
  <author>
    <name>tuchg</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vert.x 踩坑记：在Vert.x中使用ElasticSearch进行高亮等高级查询协程化</title>
    <link href="https://tuchg.github.io/2020/05/23/coroutines-Vert.x-ElasticSearch-advanced-query/"/>
    <id>https://tuchg.github.io/2020/05/23/coroutines-Vert.x-ElasticSearch-advanced-query/</id>
    <published>2020-05-23T06:10:00.000Z</published>
    <updated>2020-07-05T03:34:42.975Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jul 05 2020 11:45:28 GMT+0800 (China Standard Time) --><h2 id="1-测试环境"><a href="#1-测试环境" class="headerlink" title="1. 测试环境"></a>1. 测试环境</h2><ul><li><p><strong>Vert.x</strong> : 4.0.0-milestone4</p></li><li><p><strong>kotlin-coroutines</strong> :1.3.20</p></li><li><p><strong>jackson-databind</strong> : 2.11.0</p><blockquote><p>Vert.x 内置 jackson未提供映射到POJO实体的ObjectMapper实现</p></blockquote></li><li><p><strong>ElasticSearch</strong> : 6.8</p></li><li><p><strong><a href="https://github.com/reactiverse/elasticsearch-client" target="_blank" rel="noopener">Elasticsearch-client</a></strong> (for vert.x) : 0.2 - ec 6.7.0</p></li></ul><a id="more"></a><blockquote><p>👇贴出 Gradle(kotlin) 的关键依赖,Maven同理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.... </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 仅贴出所需部分依赖,余下需自行在官网利用 starter 生成</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">vertxVersion = <span class="string">'4.0.0-milestone4'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line"><span class="comment">//objectMapper实现</span></span><br><span class="line">implementation <span class="string">"com.fasterxml.jackson.core:jackson-databind:2.11.0"</span></span><br><span class="line"><span class="comment">//es vert.x 第三方兼容客户端</span></span><br><span class="line">implementation <span class="string">"io.reactiverse:elasticsearch-client:0.2-ec6.7.0"</span></span><br><span class="line"><span class="comment">//kotlin</span></span><br><span class="line">implementation <span class="string">"io.vertx:vertx-lang-kotlin-coroutines:<span class="variable">$vertxVersion</span>"</span></span><br><span class="line">implementation <span class="string">"io.vertx:vertx-lang-kotlin:<span class="variable">$vertxVersion</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.....</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="2-初始化Es客户端"><a href="#2-初始化Es客户端" class="headerlink" title="2. 初始化Es客户端"></a>2. 初始化Es客户端</h2><p><a href="https://github.com/reactiverse/elasticsearch-client" target="_blank" rel="noopener">io.reactiverse:elasticsearch-client</a> 在 RestHighLevelClient 基础上将异步响应接口简单封装了一层 Vert.x 范的AsyncResult，故而迁移 RestHighLevelClient下代码仅需将请求发送方法更改为elasticsearch-client封装的相对应方法即可</p><ul><li><p><a href="https://github.com/reactiverse/elasticsearch-client" target="_blank" rel="noopener">io.reactiverse:elasticsearch-client</a> 的封装实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* io.reactiverse.elasticsearch.client.RestHighLevelClient</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span>()</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchAsync</span><span class="params">(SearchRequest searchRequest, RequestOptions options, Handler&lt;AsyncResult&lt;SearchResponse&gt;&gt; handler)</span> </span>&#123;</span><br><span class="line">        Context context = vertx.getOrCreateContext();</span><br><span class="line">        delegate.searchAsync(searchRequest, options, <span class="keyword">new</span> ActionListener&lt;SearchResponse&gt;() &#123;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(SearchResponse value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//不阻塞地将异步响应注册到指定Verticle的运行时上下文</span></span><br><span class="line">             context.runOnContext(v -&gt; handler.handle(Future.succeededFuture(value)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                context.runOnContext(v -&gt; handler.handle(Future.failedFuture(e)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>在 Verticle初始化ES客户端</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchVerticle</span> : <span class="type">CoroutineVerticle</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> client: RestHighLevelClient</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Verticle 实例启动时的回调方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    client = RestHighLevelClient.create(</span><br><span class="line">    <span class="comment">// vertx即当前 Verticle 实例 </span></span><br><span class="line">      vertx, RestClient</span><br><span class="line">        .builder(HttpHost(<span class="string">"127.0.0.1"</span>, <span class="number">9200</span>, <span class="string">"http"</span>))</span><br><span class="line">        <span class="comment">//所写项目功能单一，故指定唯一 index</span></span><br><span class="line">        .setPathPrefix(<span class="string">"/items/"</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-构造查询语句"><a href="#4-构造查询语句" class="headerlink" title="4.  构造查询语句"></a>4. 构造查询语句</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//koltin 中实现单例模式的语法糖  </span></span><br><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> logger = LoggerFactory.getLogger(ElasticSearchVerticle::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    <span class="comment">//高亮</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> highlightBuilder: HighlightBuilder = HighlightBuilder()</span><br><span class="line">      .preTags(<span class="string">"&lt;em&gt;"</span>).postTags(<span class="string">"&lt;/em&gt;"</span>)</span><br><span class="line">      .field(<span class="string">"q"</span>)</span><br><span class="line">      .field(<span class="string">"o"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">searchByQuestionAndOptionsAwait</span><span class="params">(qStr: <span class="type">String</span>)</span></span>: List&lt;TestEntity&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (qStr.length &lt;= <span class="number">5</span>)</span><br><span class="line">      <span class="keyword">throw</span> SecurityException(<span class="string">"字数过短"</span>)</span><br><span class="line">    <span class="keyword">val</span> boolBuilder = QueryBuilders.boolQuery()</span><br><span class="line">    <span class="comment">//多个字段匹配 属性值 must query</span></span><br><span class="line">    <span class="keyword">val</span> matchQueryBuilder =</span><br><span class="line">      QueryBuilders.multiMatchQuery(qStr, <span class="string">"q"</span>, <span class="string">"o"</span>)</span><br><span class="line">    boolBuilder.must(matchQueryBuilder)</span><br><span class="line">    <span class="keyword">val</span> searchSourceBuilder = SearchSourceBuilder()</span><br><span class="line">      .query(boolBuilder)</span><br><span class="line">      .size(<span class="number">3</span>)</span><br><span class="line">      <span class="comment">//30分为界</span></span><br><span class="line">      .minScore(<span class="number">30.0f</span>)</span><br><span class="line">      .highlighter(highlightBuilder)</span><br><span class="line">    <span class="comment">// 协程化</span></span><br><span class="line">    <span class="keyword">return</span> awaitResult &#123;</span><br><span class="line">      <span class="keyword">return</span><span class="symbol">@awaitResult</span> mapperHandle(TestEntity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">searchSourceBuilder)</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="5-高亮查询结果映射处理"><a href="#5-高亮查询结果映射处理" class="headerlink" title="5.  高亮查询结果映射处理"></a>5. 高亮查询结果映射处理</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//koltin 中实现单例模式的语法糖  </span></span><br><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="comment">// 字段映射器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mapper = ObjectMapper()</span><br><span class="line"><span class="comment">//允许忽略不存在的字段</span></span><br><span class="line">      .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 映射处理,高亮字段等,映射到实体等</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">mapperHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    clazz: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">    sourceBuilder: <span class="type">SearchSourceBuilder</span></span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> &#123;</span><br><span class="line">    <span class="comment">//发起查询请求</span></span><br><span class="line"> <span class="keyword">return</span>  client.searchAsync(SearchRequest().source(sourceBuilder), RequestOptions.DEFAULT) &#123;</span><br><span class="line">      <span class="keyword">if</span> (it.succeeded()) &#123;</span><br><span class="line">        <span class="keyword">val</span> searchHits = it.result()?.hits</span><br><span class="line">        <span class="keyword">val</span> list = ArrayList&lt;T&gt;()</span><br><span class="line">        <span class="comment">//遍历搜索命中结果</span></span><br><span class="line">        searchHits?.forEach &#123; searchHit -&gt;</span><br><span class="line">          <span class="keyword">val</span> source = searchHit.sourceAsMap</span><br><span class="line">          <span class="comment">// fragments 因所写项目功能单一故处理不是很恰当</span></span><br><span class="line"><span class="comment">// 将原本与高亮域对应的原生字段替换为高亮后的结果</span></span><br><span class="line">          source[<span class="string">"q"</span>] =</span><br><span class="line">            searchHit.highlightFields[<span class="string">"q"</span>]?.fragments?.<span class="keyword">get</span>(<span class="number">0</span>)?.toString() ?: source[<span class="string">"q"</span>]</span><br><span class="line">          source[<span class="string">"o"</span>] =</span><br><span class="line">            searchHit.highlightFields[<span class="string">"o"</span>]?.fragments?.<span class="keyword">get</span>(<span class="number">0</span>)?.toString() ?: source[<span class="string">"o"</span>]</span><br><span class="line"><span class="comment">//映射到 pojo</span></span><br><span class="line">          list.add(</span><br><span class="line">            mapper.readValue(</span><br><span class="line">              mapper.writeValueAsString(source), clazz</span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="6-执行查询"><a href="#6-执行查询" class="headerlink" title="6.执行查询"></a>6.执行查询</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调化(未贴出代码)</span></span><br><span class="line">searchByQuestionAndOptionsAwait(<span class="string">"HelloVert.x"</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (it.succeeded())</span><br><span class="line">  <span class="comment">//...成功</span></span><br><span class="line">    it.result()</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="comment">//...失败</span></span><br><span class="line">    it.cause()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 协程同步化</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"> <span class="keyword">val</span> result= searchByQuestionAndOptionsAwait(<span class="string">"HelloVert.x"</span>)</span><br><span class="line"><span class="comment">//...成功</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">  <span class="comment">//...失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然而协程在vert.x中解决<code>Callback Hell</code>问题暂时也并非’银弹’，比如在 eventbus 中充当消费者时会不可避免的出现以下状况</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vertx.eventBus().localConsumer&lt;String&gt;(<span class="keyword">this</span>.javaClass.name) &#123; msg -&gt;</span><br><span class="line">   launch &#123;</span><br><span class="line">     <span class="keyword">val</span> x = withContext(Dispatchers.Default) &#123;</span><br><span class="line">       searchByQuestionAndOptionsAwait(<span class="string">"HelloVert.x"</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     msg.reply(x)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>层层回调，和普通异步回调相比似乎并没有减轻多少压力，且增加了更多心智负担（协程调度器），当然也可以尝试自行协程化封装，期待Vert.x 官方能在后续更新加强对kotlin的支持</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jul 05 2020 11:45:28 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;1-测试环境&quot;&gt;&lt;a href=&quot;#1-测试环境&quot; class=&quot;headerlink&quot; title=&quot;1. 测试环境&quot;&gt;&lt;/a&gt;1. 测试环境&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vert.x&lt;/strong&gt; : 4.0.0-milestone4&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;kotlin-coroutines&lt;/strong&gt; :1.3.20&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;jackson-databind&lt;/strong&gt; : 2.11.0&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Vert.x 内置 jackson未提供映射到POJO实体的ObjectMapper实现&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;ElasticSearch&lt;/strong&gt; : 6.8&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/reactiverse/elasticsearch-client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Elasticsearch-client&lt;/a&gt;&lt;/strong&gt; (for vert.x) : 0.2 - ec 6.7.0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://tuchg.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Vert.x" scheme="https://tuchg.github.io/tags/Vert-x/"/>
    
      <category term="kotlin" scheme="https://tuchg.github.io/tags/kotlin/"/>
    
      <category term="协程" scheme="https://tuchg.github.io/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="ElasticSearch" scheme="https://tuchg.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>WebFlux 下的 ReactiveElasticSearch 高级查询</title>
    <link href="https://tuchg.github.io/2020/05/22/webflux-ReactiveElasticSearch-advanced-query/"/>
    <id>https://tuchg.github.io/2020/05/22/webflux-ReactiveElasticSearch-advanced-query/</id>
    <published>2020-05-22T12:10:00.000Z</published>
    <updated>2020-07-05T03:38:12.394Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jul 05 2020 11:45:28 GMT+0800 (China Standard Time) --><p>非 Reactive　的SpringData-ElasticSearch 可利用ESRepository达到高级查询的目的,但 Reative因支持较晚<br>，目前缺乏 search( criteria ) 等高级查询实现，暂时无法利用 Reacitve-JPA 的 Repository 实现高级查询，很尴尬的鸡肋存在</p><p>不过好在ReactiveElasticsearchTemplate支持相对较为＂全面＂</p><a id="more"></a><p>目的：在reactive 的 webflux 体系下实现 es 查询多字段并高亮查询命中结果</p><p>了解到 JPA 后遂拉入响应式的依赖，调用接口实现，一顿操作猛如虎．．．然后开心的在IDEA 敲下<code>.</code> 体验 JPA 的<code>魔法</code></p><p>多次google，百度相关资料全网无果，被逼无奈那就自己走源码实现吧👩‍🦯</p><h4 id="1-解决构造查询丢失条件问题"><a href="#1-解决构造查询丢失条件问题" class="headerlink" title="1. 解决构造查询丢失条件问题"></a>1. 解决构造查询丢失条件问题</h4><p>查阅 JPA　相关资料了解到了Template这个相对底层的封装，发现ReactiveElasticsearchTemplate提供了传入查询构造器的 find () 方法</p><p>通过debug观察其运行流程发现了查询请求前置hook 方法prepareSearchRequest，看到这个 hook 后，问题已经解决了80%</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仅重写 hook</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomReactiveESTemplate</span></span>(client: ReactiveElasticsearchClient?, converter: ElasticsearchConverter?, resultsMapper: ResultsMapper?) :    ReactiveElasticsearchTemplate(client, converter, resultsMapper) &#123;</span><br><span class="line">    <span class="comment">//ES 查询前置Hook</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">prepareSearchRequest</span><span class="params">(request: <span class="type">SearchRequest</span>)</span></span>: SearchRequest &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.preference().isNotEmpty()) &#123;</span><br><span class="line">            <span class="keyword">val</span> sourceQuery = request.source()</span><br><span class="line">            <span class="comment">// 利用相对来说用不上的(项目功能单一)preference属性存取多字段，实现多字段高亮查询</span></span><br><span class="line"><span class="keyword">val</span> fields = request.preference().split(<span class="string">"#"</span>)</span><br><span class="line">            <span class="comment">//高亮构建器</span></span><br><span class="line">            <span class="keyword">val</span> highlightBuilder = HighlightBuilder()</span><br><span class="line">                    .preTags(<span class="string">"&lt;em&gt;"</span>).postTags(<span class="string">"&lt;/em&gt;"</span>)</span><br><span class="line">            <span class="comment">//遍历解析到的高亮域至高亮构建</span></span><br><span class="line">            fields.forEach &#123;</span><br><span class="line">                highlightBuilder.field(it)</span><br><span class="line">            &#125;</span><br><span class="line">            sourceQuery.highlighter(highlightBuilder)</span><br><span class="line">            <span class="comment">//还原查询</span></span><br><span class="line">            request.preference(<span class="string">""</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.prepareSearchRequest(request)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>你也许会说既然允许自己构造查询了，何必大费周章还带有破坏性地写hook 函数，直接构造高级查询传入不行吗？</p><p>我一开始也这样想的且这样做的，不过行不通，位于ReactiveElasticsearchTemplate的find() 会调用到buildSearchRequest()，该函数只读取特定查询，高亮查询并不在此列，只能自行通过预置在buildSearchRequest()之后的 hook 函数，加入高级查询</p></blockquote><h4 id="2-向-SpringBoot注入自定义hook的ReactiveESTemplate"><a href="#2-向-SpringBoot注入自定义hook的ReactiveESTemplate" class="headerlink" title="2. 向 SpringBoot注入自定义hook的ReactiveESTemplate"></a>2. 向 SpringBoot注入自定义hook的ReactiveESTemplate</h4><p>在注入后并不意味着结束，还会有映射问题，因返回高亮结果不能和 pojo 自动映射，故还需自行扩展　DefaultResultMapper（）修改映射</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReactiveESTemplateConfiguration</span></span>() &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">reactiveElasticsearchTemplate</span><span class="params">(client: <span class="type">ReactiveElasticsearchClient</span>?, converter: <span class="type">ElasticsearchConverter</span>?)</span></span>: CustomReactiveESTemplate? &#123;</span><br><span class="line">        <span class="comment">//处理高亮字段映射</span></span><br><span class="line">        <span class="keyword">val</span> resultsMapper = <span class="keyword">object</span> : DefaultResultMapper() &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Any?&gt;</span> <span class="title">mapSearchHit</span><span class="params">(searchHit: <span class="type">SearchHit</span>?, type: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;?)</span></span>: T? &#123;</span><br><span class="line">                <span class="keyword">if</span> (!searchHit!!.hasSource())</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> source = searchHit.sourceAsMap</span><br><span class="line">                <span class="keyword">if</span> (!source.containsKey(<span class="string">"id"</span>) || source[<span class="string">"id"</span>] == <span class="literal">null</span>)</span><br><span class="line">                    source[<span class="string">"id"</span>] = searchHit.id</span><br><span class="line">                <span class="keyword">val</span> highlightFields = searchHit.highlightFields</span><br><span class="line"></span><br><span class="line">                <span class="comment">// fragments 因所写项目功能单一故处理不是很恰当</span></span><br><span class="line"><span class="comment">// 将原本与高亮域对应的原生字段替换为高亮后的结果</span></span><br><span class="line">                source[<span class="string">"q"</span>] = highlightFields.<span class="keyword">get</span>(<span class="string">"q"</span>)</span><br><span class="line">                        ?.fragments</span><br><span class="line">                        ?.<span class="keyword">get</span>(<span class="number">0</span>)?.toString()</span><br><span class="line">                        ?: source[<span class="string">"a"</span>]</span><br><span class="line">                source[<span class="string">"a"</span>] =</span><br><span class="line">                        highlightFields.<span class="keyword">get</span>(<span class="string">"a"</span>)</span><br><span class="line">                                ?.fragments</span><br><span class="line">                                ?.<span class="keyword">get</span>(<span class="number">0</span>)?.toString()</span><br><span class="line">                                ?: source[<span class="string">"a"</span>]</span><br><span class="line">              <span class="comment">// 映射到 pojo</span></span><br><span class="line">                <span class="keyword">val</span> mappedResult: Any = entityMapper.readObject(source, type) <span class="keyword">as</span> Any</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">if</span> (type!!.isInterface)</span><br><span class="line">                    projectionFactory.createProjection(type, mappedResult)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    type.cast(mappedResult)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注入构造参数</span></span><br><span class="line">        <span class="keyword">val</span> template = CustomReactiveESTemplate(client, converter,</span><br><span class="line">                resultsMapper)</span><br><span class="line">        template.setIndicesOptions(IndicesOptions.strictExpandOpenAndForbidClosed())</span><br><span class="line">        template.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)</span><br><span class="line">        <span class="keyword">return</span> template</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-在-WebFlux-调用查询"><a href="#3-在-WebFlux-调用查询" class="headerlink" title="3. 在 WebFlux 调用查询"></a>3. 在 WebFlux 调用查询</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemsESRepository</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> customReactiveESTemplate: CustomReactiveESTemplate</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pageRequest = PageRequest.of(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最少搜索输入字符长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> minSearchLength = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过问题和选项搜索</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">searchByQuestionAndOptions</span><span class="params">(questions: <span class="type">String</span>)</span></span>: Flux&lt;TestEntity&gt; &#123;</span><br><span class="line">        <span class="comment">/*   if (questions.length &lt; minSearchLength)</span></span><br><span class="line"><span class="comment">               return Flux.empty()*/</span></span><br><span class="line">        <span class="keyword">val</span> boolBuilder = QueryBuilders.boolQuery()</span><br><span class="line">        <span class="comment">//多个字段匹配 属性值 must query</span></span><br><span class="line">        <span class="keyword">val</span> matchQueryBuilder = QueryBuilders.multiMatchQuery(questions, <span class="string">"q"</span>, <span class="string">"a"</span>)</span><br><span class="line">        boolBuilder.must(matchQueryBuilder)</span><br><span class="line">        <span class="keyword">val</span> query = NativeSearchQueryBuilder()</span><br><span class="line">                .withQuery(boolBuilder)</span><br><span class="line">                .withPageable(pageRequest)</span><br><span class="line">                .build()</span><br><span class="line">        query.preference = <span class="string">"q#a"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> customReactiveESTemplate</span><br><span class="line">                .find(query, TestEntity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>至此，在webflux 中进行es的高亮多字段查询完成</p><p>对了 SpringBoot 版本为 <strong>2.2.6.RELEASE</strong>, ES 版本为<strong>6.8</strong></p><p>Spring WebFlux 目前生态算不上太好，总的来说Rective还是大势所趋的，期待<code>loom</code>的早日完工</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jul 05 2020 11:45:28 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;非 Reactive　的SpringData-ElasticSearch 可利用ESRepository达到高级查询的目的,但 Reative因支持较晚&lt;br&gt;，目前缺乏 search( criteria ) 等高级查询实现，暂时无法利用 Reacitve-JPA 的 Repository 实现高级查询，很尴尬的鸡肋存在&lt;/p&gt;&lt;p&gt;不过好在ReactiveElasticsearchTemplate支持相对较为＂全面＂&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://tuchg.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="kotlin" scheme="https://tuchg.github.io/tags/kotlin/"/>
    
      <category term="协程" scheme="https://tuchg.github.io/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="ElasticSearch" scheme="https://tuchg.github.io/tags/ElasticSearch/"/>
    
      <category term="webflux" scheme="https://tuchg.github.io/tags/webflux/"/>
    
  </entry>
  
</feed>
